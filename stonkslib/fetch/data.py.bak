import os
import pandas as pd
import yfinance as yf
from datetime import datetime, timedelta
from pathlib import Path
import yaml

# Base path setup
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
YAML_PATH = os.path.join(BASE_DIR, "tickers.yaml")
DATA_DIR = os.path.join(BASE_DIR, "data", "ticker_data", "raw")

# CATEGORY -> (interval, period)
CATEGORY_INTERVALS = {
    "stocks": [
        ("1m", "7d"),
        ("2m", "60d"),
        ("5m", "60d"),
        ("15m", "45d"),
        ("30m", "45d"),
        ("1h", "2y"),
        ("1d", "3y"),
        ("1wk", "5y"),
    ],
    "etfs": [
        ("1m", "7d"),
        ("2m", "60d"),
        ("5m", "60d"),
        ("15m", "60d"),
        ("30m", "60d"),
        ("1h", "2y"),
        ("1d", "3y"),
        ("1wk", "4y"),
    ],
    "crypto": [
        ("1m", "7d"),
        ("5m", "60d"),
        ("15m", "60d"),
        ("1d", "3y"),
        ("1wk", "5y"),
    ],
}

# Rough freshness threshold per interval
FRESHNESS_MAP = {
    "1m": timedelta(minutes=5),
    "2m": timedelta(minutes=10),
    "5m": timedelta(minutes=15),
    "15m": timedelta(minutes=30),
    "30m": timedelta(minutes=60),
    "1h": timedelta(hours=2),
    "1d": timedelta(days=1),
    "1wk": timedelta(weeks=1),
}

def load_tickers(yaml_path=YAML_PATH):
    with open(yaml_path, "r") as f:
        return yaml.safe_load(f)

def is_fresh(csv_path, interval):
    """Return True if the file is fresh, else False."""
    try:
        df = pd.read_csv(csv_path, index_col=0, parse_dates=True)
        df.index = pd.to_datetime(df.index, utc=True)
        last_ts = df.index[-1]
        age = datetime.now(tz=last_ts.tz) - last_ts
        return age < FRESHNESS_MAP.get(interval, timedelta(days=1))
    except Exception as e:
        print(f"[!] Freshness check failed for {csv_path}: {e}")
        return False

def fetch_all(yaml_file=YAML_PATH, data_dir=DATA_DIR, force=False):
    tickers = load_tickers(yaml_file)

    for category, symbols in tickers.items():
        if category not in CATEGORY_INTERVALS:
            continue
        for interval_str, period in CATEGORY_INTERVALS[category]:
            for ticker in symbols:
                csv_path = Path(data_dir) / interval_str / f"{ticker}.csv"

                if not force and csv_path.exists() and is_fresh(csv_path, interval_str):
                    print(f"[✓] Skipping {ticker} ({interval_str}) — up to date")
                    continue

                print(f"[↑] Fetching {ticker} ({interval_str}, {period})...")
                try:
                    df = yf.download(ticker, interval=interval_str, period=period, progress=False)
                    if not df.empty:
                        df.index.name = "Date"
                        df.index = pd.to_datetime(df.index, utc=True)
                        csv_path.parent.mkdir(parents=True, exist_ok=True)
                        df.to_csv(csv_path)
                        print(f"[↓] Saved to {csv_path}")
                    else:
                        print(f"[!] No data for {ticker} ({interval_str})")
                except Exception as e:
                    print(f"[!] Error fetching {ticker} ({interval_str}): {e}")
